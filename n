#include <iostream>

using namespace std;

typedef struct Node* node;

struct Node {
    int  data; 
    Node* next;
};

node makeNode(int data) {
    node newNode = new Node();
    newNode->data = data;
    newNode->next = nullptr;
    return newNode;
}

bool isEmpty(node head) {
    return head == nullptr;
}

int getLength(node head) {
    int length = 0;
    while (head != nullptr) {
        length++;
        head = head->next;
     }
    return length;
}
void insertHead(node& head, int data) {
    node newNode = makeNode(data);
    if (isEmpty(head)) {
        head = newNode;
    
    }else {
        newNode->next = head;
        head = newNode;
    }
}

void insertTail(node& head, int data) {
    node newNode = makeNode(data);
    if (isEmpty(head)) {
        head = newNode;
    } else {
        node temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void inserMid(node& head, int data, int pos) {
    if (pos < 0 || pos > getLength(head)) {
        cout << "Invalid position!" << endl;
        return;
    }
    if (pos == 0) {
        insertHead(head, data);
    } else {
        node newNode = makeNode(data);
        node temp = head;
        for (int i = 0; i < pos - 1; i++) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void deleteHead(node& head) {
    if (isEmpty(head)) {
        cout << "List is empty!" << endl;
        return;
    }
    node temp = head;
    head = head->next;
    delete temp;
}
void deleteTail(node& head) {
    if (isEmpty(head)) {
        cout << "List is empty!" << endl;
        return;
    }
    if (head->next == nullptr) {
        deleteHead(head);
    } else {
        node temp = head;
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }
        delete temp->next;
        temp->next = nullptr;
    }
}

void deleteMid(node& head, int pos) {
    if (isEmpty(head)) {
        cout << "List is empty!" << endl;
        return;
    }
    if (pos < 0 || pos >= getLength(head)) {
        cout << "Invalid position!" << endl;
        return;
    }
    if (pos == 0) {
        deleteHead(head);
    } else {
        node temp = head;
        for (int i = 0; i < pos - 1; i++) {
            temp = temp->next;
        }
        node toDelete = temp->next;
        temp->next = toDelete->next;
        delete toDelete;
    }
}
void sortList(node& head) {
    if (isEmpty(head)) {
        cout << "List is empty!" << endl;
        return;
    }
    node current = head;
    while (current != nullptr) {
        node nextNode = current->next;
        while (nextNode != nullptr) {
            if (current->data > nextNode->data) {
                swap(current->data, nextNode->data);
            }
            nextNode = nextNode->next;
        }
        current = current->next;
    }
}

void printList(node head) {
    if (isEmpty(head)) {
        cout << "List is empty!" << endl;
        return;
    }
    node temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
int main() {
   
    node head = nullptr;
    while (1){
        cout << "1. Insert Head" << endl;
        cout << "2. Insert Tail" << endl;
        cout << "3. Insert Mid" << endl;
        cout << "4. Delete Head" << endl;
        cout << "5. Delete Tail" << endl;
        cout << "6. Delete Mid" << endl;
        cout << "7. Print List" << endl;
        cout << "8. Get Length" << endl;
        cout << "9. Sort List" << endl;
        cout << "10. Exit" << endl;
        int choice;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: {
                int data;
                cout << "Enter data to insert at head: ";
                cin >> data;
                insertHead(head, data);
                break;
            }
            case 2: {
                int data;
                cout << "Enter data to insert at tail: ";
                cin >> data;
                insertTail(head, data);
                break;
            }
            case 3: {
                int data, pos;
                cout << "Enter data to insert and position: ";
                cin >> data >> pos;
                inserMid(head, data, pos);
                break;
            }
            case 4:
                deleteHead(head);
                break;
            case 5:
                deleteTail(head);
                break;
            case 6: {
                int pos;
                cout << "Enter position to delete: ";
                cin >> pos;
                deleteMid(head, pos);
                break;
            }
            case 7:
                printList(head);
                break;
            case 8:
                cout << "Length of list: " << getLength(head) << endl;
                break;
            case 9:
                sortList(head);
                cout << "List sorted!" << endl;
                break;
            case 10 :
                cout << "Exiting..." << endl;
                return 0;
            default:
                cout << "Invalid choice!" << endl;
        }
    }
    

    return 0;
}
